# -*- mode: sh -*-

# All functions in this file are supposed to be used interactivley

source ~/.config-base/bash/common


# ----------------------------------------------------------------------------
#

rehistory() {
  history -r
}

# rebash reloads all shell init stuff
rebash() {
  unset __common
  unset __SHCOMMON
  . "${HOME}/.bash_profile"
}
export -f rebash


# ----------------------------------------------------------------------------
# ssh

ssh() {
  if [ $TERM == "xterm-24bit" ]; then
    TERM=xterm-256color command ssh "${@}"
  else
    command ssh "${@}"
  fi
}

# ----------------------------------------------------------------------------
# confidental mode
confidental-mode() {
  if [ "$CONFIDENTAL" == "confidental" ]; then
    set -o history
    export CONFIDENTAL=""
    echo "confidental mode disabled"

  else
    set +o history
    export CONFIDENTAL=confidental
    echo "confidental mode enabled"
  fi
}


# ----------------------------------------------------------------------------
# FZF


# Key bindings
# ------------
__fzf_select__() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
        -o -type f -print \
        -o -type d -print \
        -o -type l -print 2> /dev/null | cut -b3-"}"
  eval "$cmd" | FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" fzf -m "$@" | while read -r item; do
    printf '%q ' "$item"
  done
  echo
}

if hash fzf 2>/dev/null; then
  __fzfcmd() {
    echo "fzf"
  }

  fzf-file-widget() {
    local selected="$(__fzf_select__)"
    READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$selected${READLINE_LINE:$READLINE_POINT}"
    READLINE_POINT=$(( READLINE_POINT + ${#selected} ))
  }

  __fzf_cd__() {
    local cmd dir
    cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
       -o -type d -print 2> /dev/null | cut -b3-"}"
    dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="--reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__fzfcmd) +m) && printf 'cd %q' "$dir"
  }

  __fzf_history__() (
    local line
    shopt -u nocaseglob nocasematch
    line=$(
      HISTTIMEFORMAT= history |
        FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --tac -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS +m" $(__fzfcmd) |
        command grep '^ *[0-9]') &&
      if [[ $- =~ H ]]; then
        sed 's/^ *\([0-9]*\)\** .*/!\1/' <<< "$line"
      else
        sed 's/^ *\([0-9]*\)\** *//' <<< "$line"
      fi
  )

  if [[ ! -o vi ]]; then
    # Required to refresh the prompt after fzf
    bind '"\er": redraw-current-line'
    bind '"\e^": history-expand-line'

    # CTRL-T - Paste the selected file path into the command line
    if [ $BASH_VERSINFO -gt 3 ]; then
      bind -x '"\C-t": "fzf-file-widget"'
    else
      bind '"\C-t": " \C-u \C-a\C-k`__fzf_select__`\e\C-e\C-y\C-a\C-y\ey\C-h\C-e\er \C-h"'
    fi

    # CTRL-R - Paste the selected command from history into the command line
    bind '"\C-r": " \C-e\C-u`__fzf_history__`\e\C-e\e^\er"'

    # ALT-C - cd into the selected directory
    bind '"\ec": " \C-e\C-u`__fzf_cd__`\e\C-e\er\C-m"'
  else
    # We'd usually use "\e" to enter vi-movement-mode so we can do our magic,
    # but this incurs a very noticeable delay of a half second or so,
    # because many other commands start with "\e".
    # Instead, we bind an unused key, "\C-x\C-a",
    # to also enter vi-movement-mode,
    # and then use that thereafter.
    # (We imagine that "\C-x\C-a" is relatively unlikely to be in use.)
    bind '"\C-x\C-a": vi-movement-mode'

    bind '"\C-x\C-e": shell-expand-line'
    bind '"\C-x\C-r": redraw-current-line'
    bind '"\C-x^": history-expand-line'

    # CTRL-T - Paste the selected file path into the command line
    # - FIXME: Selected items are attached to the end regardless of cursor position
    if [ $BASH_VERSINFO -gt 3 ]; then
      bind -x '"\C-t": "fzf-file-widget"'
    else
      bind '"\C-t": "\C-x\C-a$a \C-x\C-addi`__fzf_select__`\C-x\C-e\C-x\C-a0Px$a \C-x\C-r\C-x\C-axa "'
    fi
    bind -m vi-command '"\C-t": "i\C-t"'

    # CTRL-R - Paste the selected command from history into the command line
    bind '"\C-r": "\C-x\C-addi`__fzf_history__`\C-x\C-e\C-x^\C-x\C-a$a\C-x\C-r"'
    bind -m vi-command '"\C-r": "i\C-r"'

    # ALT-C - cd into the selected directory
    bind '"\ec": "\C-x\C-addi`__fzf_cd__`\C-x\C-e\C-x\C-r\C-m"'
    bind -m vi-command '"\ec": "ddi`__fzf_cd__`\C-x\C-e\C-x\C-r\C-m"'
  fi

fi


# docker logs
dlog() {
  local FZF_DOCKER_PS_FORMAT="table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}"
  local container=$(docker ps --format "${FZF_DOCKER_PS_FORMAT}" | fzf --header-lines=1 --bind 'enter:execute(echo {2})+abort')

  local args="--tail 2000"
  local container_id
  while true; do
    container_id=$(docker ps -f name="${container}" -q)
    if [[ ! -z "$container_id" ]]; then
      hr
      docker logs -f ${args} "${container}"
    fi
    args="--tail 0"
    sleep 0.1
  done
}
