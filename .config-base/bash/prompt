#!/bin/bash
# ------------------------------------------------------------------------------
# Bash PROMPT
#
# ref: https://wiki.archlinux.org/index.php/Color_Bash_Prompt
# ref: http://www.reddit.com/r/programming/comments/697cu/bash_users_what_do_you_have_for_your_ps1/
#

# Show version controlled repository status.
# vcprompt is used if installed, otherwise __git_ps1 will be tried as well.

source "${HOME}/.config-base/bash/common"

export GIT_PS1_SHOWDIRTYSTATE="yes"
export GIT_PS1_SHOWUPSTREAM="no"
export GIT_PS1_SHOWUNTRACKEDFILES="yes"

__prompt_fn() {

  local resetFormating="\[\033[0m\]"     # reset text format

  # regular colors
  local black="\[\033[0;30m\]"
  local red="\[\033[0;31m\]"
  local green="\[\033[0;32m\]"
  local yellow="\[\033[0;33m\]"
  local blue="\[\033[0;34m\]"
  local magenta="\[\033[0;35m\]"
  local cyan="\[\033[0;36m\]"
  local white="\[\033[0;37m\]"

  # High intensity colors
  local blackH="\[\033[0;90m\]"
  local redH="\[\033[0;91m\]"
  local greenH="\[\033[0;92m\]"
  local yellowH="\[\033[0;93m\]"
  local blueH="\[\033[0;94m\]"
  local magentaH="\[\033[0;95m\]"
  local cyanH="\[\033[0;96m\]"
  local whiteH="\[\033[0;97m\]"

  # background colors
  local blackB="\[\033[40m\]"
  local redB="\[\033[41m\]"
  local greenB="\[\033[42m\]"
  local yellowB="\[\033[43m\]"
  local blueB="\[\033[44m\]"
  local magentaB="\[\033[45m\]"
  local cyanB="\[\033[46m\]"
  local whiteB="\[\033[47m\]"

  local w=100
  hash tput 2>/dev/null &&
    w=$(tput cols)

  local HH
  local MM
  HH=$(date +%H)
  MM=$(date +%M)

  local UCOLOR="${cyan}"
  local UNAME
  if [ "$(type -t __user_alias)" == "function" ]; then
    UNAME=$(__user_alias)
  else
    UNAME="$(whoami | cut -c1-4)"
  fi

  local HNAME
  if [[ -n ${HOST_ALIAS} ]]; then
    HNAME=${HOST_ALIAS}
  else
    HNAME="$(hostname | cut -c1-4)"
  fi

  local SSH
  if [ -n "$SSH_CLIENT" ]; then
    # SSH='/\'
    SSH='/\\'
  fi

  local LASTCOLOR="${yellowH}"
  local LAST
  if [[ $EUID -eq 0 ]]; then
    if [[ ${RET} = "0" ]]; then
      LASTCOLOR="${yellow}"
      LAST="#"
    else
      LASTCOLOR="${redH}"
      LAST='!#'
    fi
  else
    if [[ ${RET} = "0" ]]; then
      LAST="\$"
    else
      LASTCOLOR="${redH}"
      LAST='!\$'
    fi
  fi

  local VENV
  [[ -n ${VIRTUAL_ENV} ]] && VENV=" p:${VIRTUAL_ENV##*/}"

  local VCS
  case $HOST_TAGS in
    *:minimalshell:*)
    # nothing
    ;;
    *)
    if hash vcprompt 2>/dev/null; then
      VCS="$(vcprompt 2>/dev/null)"
    elif [[ $(type -t __git_ps1) == "function" ]]; then
      VCS=$(__git_ps1 " (%s)")
    fi
    ;;
  esac

  local PWD
  local PADDING=5
  local pwdw=$(( w - PADDING - ${#LAST} - ${#VCS}  - ${#VENV} - ${#RVM} ))
  PWD=$(__dir_chomp  "$(pwd)" $pwdw)

  # Select host name color based on HOST_TAGS environment variable
  case ${HOST_TAGS} in
    *:server:*)
      local HOST_COLOR=${black}${blueB}
      ;;
    *:workstation:*)
      local HOST_COLOR=${cyan}
      ;;
    *)
      local HOST_COLOR=${white}${blackB}
      ;;
  esac

  PS1="${TITLEBAR}\
${yellowH}â–¶${HH} \
${blue}${PWD}\
${cyanH}${VCS}\
${yellowH}\
${VENV}\
${RVM}\
\n${yellowH}:${MM} \
${UCOLOR}${UNAME}${yellowH}@${HOST_COLOR}${HNAME}${black}${cyanB}${SSH}\
${LASTCOLOR}${LAST} \
${resetFormating}"

}

__prompt_command() {
  export __RUNNING_PROMPT_COMMAND=1
  case $TERM in
    dumb)
    # do nothing
    ;;
    *)
      [ "$CONFIDENTAL" == "confidental" ] || __pwd_logger;
      [ "$CONFIDENTAL" == "confidental" ] || history -a;
      [ -n "${DARKMODE}" ] && __darkmode_switcher
      echo -ne '\a'
      ;;
  esac
  __prompt_fn
  [ "$CONFIDENTAL" == "confidental" ] || _z --add "$(command pwd '$_Z_RESOLVE_SYMLINKS' 2>/dev/null)" 2>/dev/null;
  unset __RUNNING_PROMPT_COMMAND
}
export -f __prompt_command

# ## NOTE not used atm
# function __prompt_rvm {
#   local w=$(tput cols 2>/dev/null||echo -n 100)
#   [ "$w" -gt 60 ] &&
#     which rvm-prompt >/dev/null 2>/dev/null && echo -n " r:$(rvm-prompt v g 2>/dev/null)"
# }

# ## NOTE not used atm
# function __prompt_nvm {
#   local w=$(tput cols 2>/dev/null||echo -n 100)
#   [ "$w" -gt 70 ] &&
#     if [ "$(type -t nvm_version)" == "function" ]; then
#       echo -n " n:$(nvm_version)"
#     fi
# }

# Username or alias
function __prompt_username {
  if [ "$(type -t __user_alias)" == "function" ]; then
    __user_alias
  else
    echo -n "$(whoami | cut -c1-4)"
  fi
}
export -f  __prompt_username

# Hostname or alias
function __prompt_hostname {
  if [[ -n ${HOST_ALIAS} ]]; then
    echo -n ${HOST_ALIAS}
  else
    echo -n "$(hostname | cut -c1-4)"
  fi
}
export -f  __prompt_hostname

# Support function to compactify a path
# copied: http://stackoverflow.com/questions/3497885/code-challenge-bash-prompt-path-shortener
function __dir_chomp {
  local p=${1/#$HOME/\~} b s
  # Remove [ and ] from strings
  p=${p//[/ }
  # Remove multiple spaces, don't need them
  p=${p//  / }
  s=${#p}
  while [[ $p != "${p//\/}" ]]&&(($s>$2))
  do
    p=${p#/}
    [[ $p =~ \.?. ]]
    b=$b/${BASH_REMATCH[0]}
    p=${p#*/}
    ((s=${#b}+${#p}))
  done
  echo ${b/\/~/\~}${b+/}$p
}
export -f  __dir_chomp

# Compact version of current working directory
function __title_pwd {
  echo -n $(__dir_chomp  "$(pwd)" 40)
}
export -f  __title_pwd


# Set up prompt
function __prompt_activate {
  # Set title in xterm*
  case $TERM in
    xterm*|rxvt*)
      TITLEBAR='\[\033]0;bash: $(__prompt_username)@$(__prompt_hostname): $(__title_pwd)\007\]'
      trap '
[[ ! $BASH_SOURCE ]] &&
[[ ! $COMP_LINE ]] &&
[[ ! $BASH_COMMAND == "export RET="* ]] &&
[[ ! $BASH_COMMAND == "__prompt_command" ]] &&
[[ ! $BASH_COMMAND == "export __RUNNING_PROMPT_COMMAND=1" ]] &&
[[ ! $__RUNNING_PROMPT_COMMAND ]] &&
printf "\e]0;%s\a" "bash: $(__prompt_username)@$(__prompt_hostname): $BASH_COMMAND $(__title_pwd)" >/dev/tty' DEBUG
      ;;
    *)
      TITLEBAR=""
      ;;
  esac

  PS1="${TITLEBAR}"
  PS2='> '
  PS4='+ '
  export PROMPT_COMMAND="export RET=\$?;__prompt_command"
}

export -f  __prompt_activate
