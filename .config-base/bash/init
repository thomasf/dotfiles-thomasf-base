# -*- mode: sh -*-
source ~/.config-base/bash/common

# ------------------------------------------------------------------------------
# HOME DIR LOCAL ENVIRONMENTS
#
bash_start_time=$(date +%s)
bash_uptime() {
  echo "$(($(date +%s)-${bash_start_time})) seconds"
}

# log is supposed to help shell init performance debugging.
log() {
  # [ ! -z "$PS1" ] \
  #   && [ ! "${TERM}" == "dumb" ] \
  #   && [ ! "${TERM}" == "eterm" ] \
  #   && [ ! "${TERM}" == "eterm-color" ] \
  #   && echo -n "â– "
  return 0
}
export -f log


# -------------------------------------------------------------------------------
# Connect to gpg agent if possible
# TODO maybe not always do this
log "gpg-agent"
if [ -z "$SSH_CLIENT" ]; then
  agent_file="$HOME/.gnupg/gpg-agent-info-$(hostname)"
  if [ -r "$agent_file" ] && kill -0 $(grep GPG_AGENT_INFO "$agent_file" | cut -d: -f 2) 2>/dev/null; then
    source "$agent_file"
    export GPG_AGENT_INFO;
    export SSH_AUTH_SOCK;
    export SSH_AGENT_PID
  fi
  GPG_TTY=$(tty)
  export GPG_TTY
fi


# ------------------------------------------------------------------------------
# NON INTERACTIVE RETURN POINT
#
[ -z "$PS1" ] \
  && return

# ------------------------------------------------------------------------------
# LOAD INTERACTIVE
#

source ~/.config-base/bash/interactive

#
#
#
# .....  and here followed all old stuff
#


# ------------------------------------------------------------------------------
# PRIVATE AND LOCAL
#
[ -e "${HOME}/.bashrc-private" ] \
  && . "${HOME}/.bashrc-private" \
  && log "loaded .bashrc-private"

[ -e "${HOME}/.bashrc-local" ] \
  && . "${HOME}/.bashrc-local" \
  && log "loaded .bashrc-local"

# Solarized dark for console terminal
if [ "$TERM" = "linux" ]; then
  echo -en "\e]P0073642"
  echo -en "\e]P8002b36"
  echo -en "\e]P1dc322f"
  echo -en "\e]P9cb4b16"
  echo -en "\e]P2859900"
  echo -en "\e]PA586e75"
  echo -en "\e]P3b58900"
  echo -en "\e]PB657b83"
  echo -en "\e]P4268bd2"
  echo -en "\e]PC839496"
  echo -en "\e]P5d33682"
  echo -en "\e]PD6c71c4"
  echo -en "\e]P62aa198"
  echo -en "\e]PE93a1a1"
  echo -en "\e]P7eee8d5"
  echo -en "\e]PFfdf6e3"
  clear
  (
    [ -e /tmp/.X11-unix ] &&
      cd /tmp/.X11-unix
    for x in X*; do
      echo "found local x11 session: :${x#X}";
    done
  )
fi

# Only do this automatically if not root
if [ $UID != 0 ]; then

  # Pip download cache
  # mkdir -p "${HOME}/.cache/pip_download" \
  #   && export PIP_DOWNLOAD_CACHE="${HOME}/.cache/pip_download"
  mkdir -p "${HOME}/.cache/pip_download"

  # Maybe load Node version manager
  [ ! "$(type -t nvm)" = "function" ] \
    && [ -f "${HOME}/.opt/nvm/nvm.sh" ] \
    && log "nvm" \
    && source "${HOME}/.opt/nvm/nvm.sh"

  # Set virtualenvwrapper hooks dir
  [ -e "${HOME}/.virtualenvwrapper-hooks" ] \
    && VIRTUALENVWRAPPER_HOOK_DIR="${HOME}/.virtualenvwrapper-hooks" \
    && export VIRTUALENVWRAPPER_HOOK_DIR

  # Maybe load virtualenvwrapper
  if [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
    # TODO: Probably do conditional check for this, it's only needed and only
    # works with python from homebrew.
    #
    # if [ ${__OS} = darwin ]; then
    #   export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
    # fi
    log "virtualenvwrapper" \
      && source "/usr/local/bin/virtualenvwrapper.sh"
  fi

  # Set flexsdk home
  [ -d "${HOME}/.opt/flex_sdk" ] \
    && export FLEX_HOME="${HOME}/.opt/flex_sdk"

  # Set android sdk home
  [ -d "${HOME}/.opt/android-sdks" ] \
    && export ANDROID_SDK="${HOME}/.opt/android-sdks" \
    && export ANDROID_HOME="${ANDROID_SDK}"

  # Set android ndk home
  [ -d "${HOME}/.opt/android-ndk" ] \
    && export ANDROID_NDK="${HOME}/.opt/android-ndk"

fi

# ------------------------------------------------------------------------------
# BASH
#
log "bash config"
shopt -s checkwinsize

if [ ! ${__OS} = darwin ]; then
  shopt -s checkjobs
  shopt -s cdspell
  shopt -s dirspell
fi
if [ $UID != 0 ]; then
  export HISTFILE=~/.bash_history
else
  export HISTFILE=~/.bash_history_root
fi
shopt -s histappend
export HISTCONTROL=ignoredups
export HISTSIZE=5000
export HISTTIMEFORMAT='%F %T '
export HISTIGNORE="&:ls:cd*:[bf]g:exit:pwd:clear:mount:umount:?"

#
# ------------------------------------------------------------------------------
#
#   emacs ansiterm
#
if [ "$TERM" = "eterm-color" ]; then
  function __eterm_set_cwd {
    echo -e "\033AnSiTc" "$(pwd)"
  }
  function eterm-reset() {
    echo -e "\033AnSiTu" "$LOGNAME"
    __eterm_set_cwd
    if [ $(uname) = "SunOS" ]; then
      hostname_options="";
    else
      hostname_options="-f";
    fi
    echo -e "\033AnSiTh" "$(hostname $hostname_options)"
  }
  eterm-reset
fi

# Add faked cd with full paths to log whenever pwd changes
export __last_logged_pwd=${PWD// /\\ }
__pwd_logger() {
  local CPWD=${PWD// /\\ }
  if [[ ! "$CPWD" == "$__last_logged_pwd" ]]; then
    local HISTIGNORE=""
    history -s cd ${CPWD}
    __last_logged_pwd=${CPWD}
    declare -f __eterm_set_cwd >/dev/null && __eterm_set_cwd
  fi
}
export -f __pwd_logger

# ------------------------------------------------------------------------------
#
# TERMINAL COLOR THEME

__darkmode_switcher() {
  if [ -e ~/.config/darkmode ]; then
    [ ! "${DARKMODE}" = dark ] && export DARKMODE=dark && termcolors
  else
    [ "${DARKMODE}" = dark ] && export DARKMODE=light && termcolors
  fi
}
export -f __darkmode_switcher

case $HOST_TAGS in
  *:minimalshell:*)
  # nothing
  ;;
  *)
    if hash termcolors 2>/dev/null && [ -z $SSH_TTY ] && [ -z $TMUX ]; then
      case $TERM in
        rxvt*|xterm*)
          [ -e ~/.config/darkmode ] && export DARKMODE=dark || export DARKMODE=light
          termcolors
          ;;
      esac
    fi
    ;;
esac

#
# ------------------------------------------------------------------------------
#
# TERMINAL OPTIONS
#
# enable xon/xoff flow control
hash stty 2>/dev/null &&
  stty -ixon

# ------------------------------------------------------------------------------
# COMPLETION
#

log "bash completion"
[ -f "/etc/bash_completion" ] \
  && ! shopt -oq posix \
  && . "/etc/bash_completion"

[ -f "/usr/local/etc/bash_completion" ] \
  && ! shopt -oq posix \
  && . "/usr/local/etc/bash_completion"

for file in $(find $HOME/.config-base/bash/completion.d/ -not -type d); do
  if [ ! ${file} = ag ] && [ ! ${__OS} = darwin ]; then
    source $file
  fi
done

alias t=todo.sh
alias tl='t ls'
alias tp='t projectview'
complete -F _todo t

# ------------------------------------------------------------------------------
# DIRCOLORS
#
log "dircolors"
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.config-base/dircolors/default && eval "$(dircolors -b ~/.config-base/dircolors/default 2>/dev/null)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

# ------------------------------------------------------------------------------
# Misc
#

[ -f "${__BASH}/z" ] \
  && log "z" \
  && export _Z_CMD='__z' \
  && . "${__BASH}/z"

if [ -x /usr/bin/lesspipe ]; then
  eval "$(SHELL=/bin/sh lesspipe)"
  if [ -f /usr/share/source-highlight/src-hilite-lesspipe.sh ]; then
    export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
    export LESS=' -R '
  fi
fi

if [ ! -z "${BASH}" ]; then
  [ -f "${__BASH}/functions" ] \
    && log "functions" \
    && . "${__BASH}/functions"
fi


# clipboard paste
if [ -n "$DISPLAY" ] && [ -x /usr/bin/xsel ] ; then
  # Work around a bash bug: \C-@ does not work in a key binding
  bind '"\C-x\C-m": set-mark'
  # The '#' characters ensure that kill commands have text to work on; if
  # not, this binding would malfunction at the start or end of a line.
  bind 'Control-v: "#\C-b\C-k#\C-x\C-?\"$(xsel -ob --clipboard)\"\e\C-e\C-x\C-m\C-a\C-y\C-?\C-e\C-y\ey\C-x\C-x\C-d"'
fi


# host tags
case $HOST_TAGS in
  *:minimalshell:*)
  # nothing
  ;;
  *)
    hash hub 2>/dev/null &&
      alias git=hub
    ;;
esac



# Activate the prompt
log "activate prompt"

if [ ! -z "${BASH}" ]; then
  [ -f "${__BASH}/prompt" ] \
    && log "prompt" \
    && . "${__BASH}/prompt"


  case $TERM in
    dumb)
    # do nothing
    ;;
    *)
      __prompt_activate
      ;;
  esac
fi

# replace log function with empty stub
log() {
  return 0
}


hash manpath 2>/dev/null &&
  unset MANPATH &&
  export MANPATH=$(manpath -q)

case $TERM in
  dumb)
  # do nothing
  ;;
  *)
    echo -e -n '\r'
    ;;
esac

if [ ! "${TERM}" == "dumb" ] &&
     [ "${PWD}" == "${HOME}" ]; then
  if wsdir-cd >/dev/null || cdd  >/dev/null ; then
    wsenv-source >/dev/null || true
    [ -z $VIRTUAL_ENV ] &&
      hash wsname 2>/dev/null &&
      [ $(wsname -p >/dev/null ) ] &&
      workon $(wsname -p) 2>/dev/null || true
    git status --short --branch 2>/dev/null || true
  fi
  history -n
  __pwd_logger
fi

[ ! -z $SSH_TTY ] &&
  [ -z $TMUX ] &&
  hash tmux 2>/dev/null &&
  tmux list-sessions 2>/dev/null ||
    true

[ $UID == 0 ] &&
  export TMOUT=3600 ||
    true


# end of init
