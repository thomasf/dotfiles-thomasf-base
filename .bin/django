#!/usr/bin/env python

import os
import signal
import subprocess
import sys
from inspect import getframeinfo, stack
from os.path import join as joinpath

helptext = """Django manage wrapper.

The additional utiltiy commands are modeled to work on very specific project
structures so they probably won't just work OOTB for any general django
project.

Pipenv is supported, if a 'Pipfile' is located in the same directory as
'manage.py', all commands will be exedcuted using 'pipenv run'.
"""

verbose = False

argv = sys.argv
if len(argv) > 1 and argv[1] == "-v":
    verbose = True
    argv = (argv[0],) + tuple(argv[2:])
else:
    sys.tracebacklimit = 0

has_setpgrp = sys.platform in ["linux", "linux2"]


def log(*msg):
    if verbose:
        caller = getframeinfo(stack()[1][0])
        strs = [str(i) for i in msg]
        print("{:4}: {}".format(caller.lineno, " ".join(strs)))


log("args after -v", argv)

ALIASES = {
    # Django
    "c": "collectstatic",
    "r": "runserver",
    "rs": ("runserver", "--noreload", "--nothreading"),
    "t": ("test", "-k"),
    # Shell
    "d": "dbshell",
    "s": "shell",
    "sp": ("shell_plus", "--ipython"),
    # Migrations
    "m": "migrate",
    # Haystack
    # 'ix': 'update_index',
    # 'rix': 'rebuild_index',
    # Django Extensions
    "rp": "runserver_plus",
    "url": "show_urls",
    "gm": "graph_models",
    # custom local commands
    "k": "kill_runservers",
    "kk": "kill_manages",
    "wr": "watchexec_run",
    "wt": "watchexec_test",
    "wl": "watchexec_lint",
}

for k in ALIASES:
    if isinstance(ALIASES[k], str):
        ALIASES[k] = (ALIASES[k],)


def kill_runservers(ctx):
    return (("pkill", "-f", "manage.py runserver"),)


kill_runservers.help = (
    "Kill all processes matching 'manage.py runserver'. "
    "This command probably only works in linux os'es."
)


def kill_manages(ctx):
    # this command probably only works in linux os'es
    return (("pkill", "-f", "manage.py"),)


kill_manages.help = (
    "Kill all processes matching 'manage.py'. "
    "This command probably only works in linux os'es."
)


def watchexec_run(ctx):
    return (
        (
            "watchexec",
            "--watch",
            ctx.project_root,
            "-s",
            "SIGKILL",
            "--restart",
            "--exts",
            ".py,.html,.env,.mo",
            "--",
        )
        + ctx.env_cmd
        + ctx.python_cmd
        + ctx.manage_py
        + ("runserver", "--noreload")
        + ctx.args[1:],
    )


watchexec_run.help = (
    "runserver with --noreload and reloading instead controlled by watchexec."
)


def watchexec_test(ctx):
    return (
        (
            "watchexec",
            "--clear",
            "--watch",
            ctx.project_root,
            "--exts",
            ".py,.html,.env,.json,.mo,.po",
            "--",
        )
        + ctx.env_cmd
        + ctx.python_cmd
        + ctx.manage_py
        + ("test", "--keepdb")
        + ctx.args[1:],
    )


watchexec_test.help = "test with auto reloading controlled by watchexec."


def watchexec_lint(ctx):
    return (
        (
            "watchexec",
            "--clear",
            "--watch",
            ctx.project_root,
            "-s",
            "SIGKILL",
            "--exts",
            ".py",
            "--",
            sys.argv[0],
            "lint",
        ),
    )


watchexec_lint.help = (
    "the 'lint' custom command with auto triggering controlled by watchexec."
)


def fmt(ctx):
    commands = tuple()

    if ctx.has_file("pyproject.toml", find_line="[tool.black]"):
        commands += ((ctx.env_cmd + ("black", "-q", ctx.project_root)),)
    elif ctx.has_file(".flake8rc"):
        commands += (
            (
                ctx.env_cmd
                + (
                    "autopep8",
                    "--ignore-local-config",
                    "--global-config",
                    ctx.rootfile(".flake8rc"),
                    "--exclude",
                    "*/migrations/*,*/node_modules/*",
                    "-a",
                    "-r",
                    "--in-place",
                    ctx.project_root,
                )
            ),
        )
    if ctx.has_file(".isort.cfg"):
        commands += (
            (
                ctx.env_cmd
                + (
                    "isort",
                    "-q",
                    "-sp",
                    ctx.rootfile(".isort.cfg"),
                    # "-y",
                    "-rc",
                    ctx.project_root,
                )
            ),
        )
    if len(commands) == 0:
        print(".isort.cfg or .flake8rc was not found")
        sys.exit(1)
    return commands


fmt.help = (
    "Runs isort/autopep8 to format python code. "
    "requires .flake8rc and .isort.cfg in project root to work."
)


def lint(ctx):
    commands = tuple()
    if ctx.has_file(".isort.cfg"):
        log("isort config detected")
        commands += (
            ctx.env_cmd
            + (
                "isort",
                "-q",
                "-sp",
                ctx.rootfile(".isort.cfg"),
                "-df",
                "-c",
                "-rc",
                ctx.project_root,
            ),
        )
    if ctx.has_file(".flake8rc"):
        log("flake8 config detected")
        commands += (
            (
                ctx.env_cmd
                + ("flake8", "--config", ctx.rootfile(".flake8rc"), ctx.project_root)
            ),
        )
    if len(commands) == 0:
        print(".isort.cfg or .flake8rc was not found")
        sys.exit(1)
    return commands


lint.help = (
    "Runs isort/flake8 to lint python code. "
    "requires .flake8rc and .isort.cfg in project root to work."
)


def fml(ctx):
    return ((sys.argv[0], "fmt"), (sys.argv[0], "lint"))


fml.help = "Run custom command 'fmt' followed by 'lint'"


CALLS = {
    "kill_runservers": kill_runservers,
    "kill_manages": kill_manages,
    "watchexec_run": watchexec_run,
    "watchexec_test": watchexec_test,
    "watchexec_lint": watchexec_lint,
    "lint": lint,
    "fmt": fmt,
    "fml": fml,
}

stderr = None
if "DJANGO_AUTO_COMPLETE" in os.environ:
    CALLS = {}
    stderr = open(os.devnull, "w")


class Context(object):
    def __init__(self, env_cmd, python_cmd, project_root, manage_py, args):
        self.env_cmd = env_cmd
        self.python_cmd = python_cmd
        self.project_root = project_root
        self.manage_py = manage_py
        self.args = args

    def rootfile(self, filename):
        return joinpath(self.project_root, filename)

    def has_file(self, filename, find_line=None):
        full_name = self.rootfile(filename)
        exists = os.path.exists(full_name)
        if find_line is None:
            log("exists:", exists, full_name)
            return exists
        with open(full_name, "r") as f:
            if f.readline().strip() == find_line:
                log("has_line:", full_name, find_line)
                return True
        log("does not have line:", full_name, find_line)
        return False


def run(*args):
    """
    Run the given command.

    Parameters:
    :param command: A string describing a command.
    :param args: A list of strings describing args to the command.
    """

    log("start:", args)
    if len(args) > 0 and args[0] in ALIASES:
        args = ALIASES[args[0]] + args[1:]
        log("found alias:", args)

    project_root = os.getcwd()
    while not os.path.exists(joinpath(project_root, "manage.py")):
        base_dir = os.path.dirname(project_root)
        if base_dir != project_root:
            project_root = base_dir
        else:
            sys.exit(
                "django-shortcuts: No 'manage.py' script"
                " found in this directory or its parents."
            )
    log("project root", project_root)
    manage_py = (joinpath(project_root, "manage.py"),)

    python_cmd = (sys.executable,)
    env_cmd = tuple()
    if os.path.exists(joinpath(project_root, "poetry.lock")):
        env_cmd = ("poetry", "run")
        python_cmd = ("python",)
    elif os.path.exists(joinpath(project_root, "Pipfile.lock")):
        env_cmd = ("pipenv", "run")
        python_cmd = ("python",)
    log("env_cmd:", env_cmd)
    log("python:", python_cmd)

    if len(args) > 0 and args[0] in CALLS:
        ctx = Context(env_cmd, python_cmd, project_root, manage_py, args)
        commands = CALLS[args[0]](ctx)
        if len(args) == 1:
            args = tuple()
        else:
            args = args[1:]
    else:
        commands = (env_cmd + python_cmd + manage_py + args,)

    log("commands", commands)

    cmd_env = os.environ.copy()
    if "ENV_FILE" in cmd_env:
        log("ENV_FILE is set, will not override:", cmd_env["ENV_FILE"])
    else:
        dev_envfile = joinpath(project_root, "dev.env")
        if os.path.exists(dev_envfile):
            cmd_env["ENV_FILE"] = dev_envfile
            log("set ENV_FILE: ", dev_envfile)

    if len(commands) > 1:
        failed = 0
        for cmd in commands:
            log("command", cmd, ":", " ".join(cmd))
            ex = subprocess.call(cmd, env=cmd_env, stderr=stderr)
            if ex != 0:
                failed = ex
        return failed
    else:
        log("command", commands[0], ":", " ".join(commands[0]))
        log("starting subprocess")
        ret = subprocess.call(commands[0], env=cmd_env, stderr=stderr)
        log("subprocess ended with exit code {}".format(ret))
        return ret


def print_help():
    print(helptext)
    print("\nAliases:")
    for k in ALIASES:
        print("{}\t{}".format(k, " ".join(ALIASES[k])))
    print("\nCustom commands:")
    for k in CALLS:
        print("{:16}\t{}".format(k, CALLS[k].help))


def main():
    """Entry-point function."""
    if len(argv) > 1 and argv[1] == "-h":
        print_help()

    if has_setpgrp:
        os.setpgrp()

        def killer(sig, frame):
            os.killpg(0, signal.SIGKILL)

        signal.signal(signal.SIGINT, killer)

    try:
        sys.exit(run(*argv[1:]))
    except Exception:
        if has_setpgrp:
            os.killpg(0, signal.SIGKILL)


if __name__ == "__main__":
    main()
