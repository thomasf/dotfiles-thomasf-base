#!/bin/bash
#
#

# colors
reset="$(tput sgr0 2>/dev/null||echo -n)"
red="$(tput setaf 1 2>/dev/null||echo -n)"
green="$(tput setaf 2  2>/dev/null||echo -n)"
yellow="$(tput setaf 3  2>/dev/null||echo -n)"
magenta="$(tput setaf 5  2>/dev/null||echo -n)"

set -e
# set -x
set -euxo pipefail

ts() {
  echo "${reset}[$(date +%T)] ${@}"
}


# cdo cd's into ~/.opt/$1
cdo() {
  cd "${HOME}/.opt/${1}"
}
export -f cdo

# uptodate fetches a git repo and returns non 0 if HEAD is in sync with remote.
uptodate() {
  local dir=${1}
  [ ! -d ${dir} ] && return 0
  cd ${dir}
  git fetch upstream master
  local changes=$(git rev-list HEAD..upstream/master --count)
  echo "uptodate ${dir} changes: ${changes}"
  return $changes
  # return 2
}
export -f uptodate

# resetupstream resets a git working tree
resetupstream() {
  git log HEAD..upstream/master --oneline
  git reset --hard upstream/master
}
export -f resetupstream

# runCmd runs a command in a subshell, on graphical terminals this
runCmd() {
  if [ -n "$DISPLAY" ] && [ `which urxvt` ]; then
    exec urxvt -title upgradeall -name upgradeall -e bash -c \
         "termcolors; echo RUN \" $* \";
$*
echo ;
echo \"COMPLETED: $* \";
echo \">>> ENTER KEY CLOSES TERMINAL!\";
read any;" &
  else
    (
      set +e
      $*
    )
  fi
}


# upgrader-go installs variout things using go get.
upgrader-go() {
  local out
  echo UPDATING go-tools
  GOPATH=${HOME}
  export GOPATH;
  for l in  \
    github.com/github/hub \
      github.com/go-delve/delve/cmd/dlv \
      github.com/google/gops \
      github.com/junegunn/fzf \
      github.com/monochromegane/the_platinum_searcher/cmd/pt \
      github.com/profclems/glab/cmd/glab \
      github.com/shurcooL/markdownfmt \
      github.com/smartystreets/goconvey \
      github.com/x-motemen/ghq \
      golang.org/x/perf/cmd/benchstat \
      golang.org/x/tools/cmd/benchcmp \
      golang.org/x/tools/cmd/goimports \
      golang.org/x/tools/cmd/stringer \
      golang.org/x/tools/gopls \
    ; do
    ts "${green}${l}${reset}"
    (
      go install "${l}@latest"
    ) || echo -e "\n${red}FAILED ${l}\n${yellow}${out}${reset}\n"
  done
  for l in  \
      github.com/boyter/scc@master \
    ; do
    ts "${green}${l}${reset}"
    (
      go install "${l}"
    ) || echo -e "\n${red}FAILED ${l}\n${yellow}${out}${reset}\n"
  done
}

upgrader-dunst() {
  cdo dunst
  resetupstream
  make
  sudo make install
}

upgrader-compton(){
  cdo compton
  resetupstream
  make
}

upgrader-mu(){
  cdo mu
  resetupstream
  make
  sudo make install
}

upgrader-pip() {
  py-cmd-env upgrade
}

upgrader-npm() {
  npm install -g \
      babel-eslint \
      bower \
      browserify watchify \
      coffee-script \
      coffeelint \
      eslint \
      eslint-plugin-react \
      grunt-cli \
      gulp \
      js2coffee \
      jshint \
      jsonlint \
      jsxhint \
      npm-proxy-cache \
      stylus \
      tern \
      titanium \
      uglify-js \
      uglifycss \
      webpack \
  ;

}

dp() {
  for i in ${@}; do
    ts "${green}${i}${reset}"
    docker pull ${i}
  done
}

upgrader-docker() {
  dp golang:1.{11,12,13,14}{,-alpine}
  dp python:{2.7,3.7,3.8}{,-alpine}
  dp ubuntu:{16.04,18.04,20.04}
  dp redis:{3,4,5}
  dp postgres:{9,10,11,12}
  dp plugins/{docker,slack,git,s3,drone-git}
  dp thomasf/{twine,drone-devpi}
  dp minio/minio
  # dp drone/drone:0.7
}

cmd=${1}
case $cmd in
  go|dust|compton|mu|npm|pip|docker)
    upgrader-${cmd}
    ;;
  all)
    runCmd "sudo apt-get update ; sudo apt-get dist-upgrade"
    # runCmd "xmonadUpdate"
    # runCmd "${HOME}/.emacs.d/installDeps emacs"
    runCmd "hsadmin pull"
    runCmd "$0 go" &
    runCmd "$0 pip" &
    ;;
  *)
    echo "$0 all go dust compton mu npm pip"
    ;;
esac

